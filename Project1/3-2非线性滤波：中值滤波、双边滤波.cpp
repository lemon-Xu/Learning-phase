/*	非线性滤波概述
	线性滤波，即两个信号之和的响应和它们各自响应之和相等。话句话说，每个像素的输出值是一些输入像素的加权和。线性滤波器易于构造，并且易于从频率响应角度来进行分析。
	然而，在很多情况下，使用领域像素的非线性滤波会得到更好的效果。比如在噪声是散粒噪声而不是高斯噪声，即图像偶尔会出现很大的值的时候，用高斯滤波器对图像进行模糊的话，噪声像素是不会被去除的，它们只是转换为更为柔和但仍然可见的散粒。这就到了中值滤波登场的时候了。
*/


/*	中值滤波
	c++: void medianBlur(InputArray src, OutputArray dst, int ksize)
	3:int类型的ksize，孔径的线性尺寸(aperture inear size)必须是大于1的奇数
	中值滤波（Median filter）是一种典型的非线性滤波技术，基本思想是用像素点领域灰度值的中值来代替像素点的灰度值，该方法在去除脉冲噪声、椒盐噪声的同时又能保留图像的边缘细节。
	中值滤波是基于排序统计理论的一种能有效抑制噪声的非线性信号处理技术，其基本原理是把数字图像或数字序列中一点的值用该点的一个领域中各点值的中值代替，让周围的像素值接近真实值，从而消除孤立的噪声点。这对斑点噪声（speck noise）和椒盐噪声（salt-sand-pepper noise）来说尤其有用，因为它不依赖于领域内那些与典型值差别很大的值。中值滤波在处理连续图像窗函数时与线性滤波器的工作方式类似，但滤波过程却不再是加权运算。
	中值滤波可以克服常见线性滤波器的图像细节模糊问题，而且对滤除脉冲干扰及图像扫描噪声非常有效，也常用于保护边缘信息。
*/

/*	中值滤波于均值滤波器比较
	优势： 由于噪声成分很难选上，所以几乎不会影响到输出。中值滤波无论是在消除噪声还是保存边缘方面都是一个不错的方法。
	劣势： 中值滤波花费的时间是均值滤波的5倍以上。对一些细节（特别是细、尖顶等）多的图像不太适合。
*/


/*	双边滤波
	c++: void bilateralFilter(InputArray src, OutputArray dst, int d, double sigmaColor, double sigmaSpace, int borderType=BORDER_DEFAULT)
	3：int类型的d，表示在过滤过程中每个像素领域的直径。如果这个值被设为非正数，那么OpenCV会从第五个参数sigmaSpace来计算出它。
	4：double类型的sigmaColor，颜色空间滤波器的sigma值。这个参数的值越大，就表明该领域内有越宽广的颜色会被混合到一起，产生较大的半相等颜色区域。
	5：double类型的sigmaSpace，坐标空间中滤波器的sigma值，坐标空间的标注方差。它的数值越大，意味着越远的像素会相互影响，从而使更大的区域中足够相似的颜色获取相同的颜色。当d>0时，d指定了领域大小且与sigmaSpace无关。否则，d正比于sigmaSpace。
	双边滤波（Bilateral filter）是一种非线性的滤波方法，是结合图像的空间域邻近度和像素值相似度的一种折中处理，同时考虑空域信息和灰度相似性，达到保边去噪的目的，具有简单、非迭代、局部的特点。
	双边滤波器的好处是可以做边缘保存（edge preserving）。以往常用维纳滤波或者高斯滤波去降噪，但二者都会比较明显地模糊边缘，对于高频细节的保护效果并不明显。双边滤波器顾名思义，比高斯滤波多了一个高斯方差sigma-d，它是基于空间分布的高斯滤波函数，所以在边缘附近，离得较远的像素不会对边缘上的像素值影响太多，这样就保证了边缘附近像素值的保存。但是，由于保存了过多的高频信息，对于彩色图像里的高频噪声，双边滤波器不能够干净地滤掉，只能对于低频信息进行较好的滤波。
*/



#include <opencv2/opencv.hpp>
using namespace cv;

int main()
{
	Mat image = imread("img/700-700狂三1.jpeg");

	imshow("【原图】", image);

	Mat out;
	medianBlur(image, out, 7);

	imshow("中值滤波【效果图】", out);

	Mat bilateral;

	bilateralFilter(image, bilateral, 25, 25*2, 25/2);

	imshow("双边滤波【效果图】", bilateral);

	waitKey(0);

	return 0;
}